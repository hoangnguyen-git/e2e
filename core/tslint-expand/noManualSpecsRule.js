"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new NoManualSpecsWalker(sourceFile, this.getOptions()));
    };
    Rule.CLASS_NAME_SPEC = 'spec.ts';
    Rule.MANUAL_SPECS_FAILURE_STRING = 'Manually writing spec files is forbidden. Please use aurea-automation module.';
    Rule.AUTOGENERATED_COMMENT_STRING = 'Auto generated by aurea-automation';
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var NoManualSpecsWalker = (function (_super) {
    __extends(NoManualSpecsWalker, _super);
    function NoManualSpecsWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoManualSpecsWalker.prototype.visitBlock = function (node) {
        var firstExpression = node.statements[0];
        var expressionCallingBlock = node.parent.parent.getText();
        if (node.getSourceFile().fileName.includes(Rule.CLASS_NAME_SPEC)
            && firstExpression
            && !this.isAutoGeneratedComment(firstExpression.getFullText())
            && this.startsWithIT(expressionCallingBlock)) {
            this.addFailureAt(node.getStart(), node.getWidth(), Rule.MANUAL_SPECS_FAILURE_STRING);
        }
        _super.prototype.visitBlock.call(this, node);
    };
    NoManualSpecsWalker.prototype.isAutoGeneratedComment = function (commentText) {
        return commentText.includes(Rule.AUTOGENERATED_COMMENT_STRING);
    };
    NoManualSpecsWalker.prototype.startsWithIT = function (text) {
        return text.startsWith('it(');
    };
    return NoManualSpecsWalker;
}(Lint.RuleWalker));
